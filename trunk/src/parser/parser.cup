package compiler.syntax;

import compiler.settings.*;
import java_cup.runtime.*;


parser code {:
	
:}


//NON TERMINALS
non terminal S, EnvironmentFile, Meta, Interface, Step, Actions;
non terminal ParticipantFiles, ParticipantFile;
non terminal SimulationFile, EnvironmentConfig, ParticipantConfigList, ParticipantConfigs, ParticipantConfig, End;
non terminal Environmental_vars, Participant_vars, AttributeDeclaration, AttributeDeclarationList;
non terminal Block, Action, ArgList, Arg, DataType;
non terminal AssignmentList, Assignment;
non terminal Lines, Statement, BooleanExpression, NumericalExpression;
non terminal IfStatement, ElseStatement, Declaration, Constraint, ArithmeticExpression;
non terminal IdList;
non terminal FunctionCall, NumericalExpressionList, SystemPartRef, SystemVar, SystemVarName, Index;
non terminal OrExpression, AndExpression, RelationalExpression, EqualityExpression, AdditiveExpression;
non terminal MultiplicativeExpression, UnaryExpression, Data;


//TERMINALS

terminal NAME, ENVIRONMENT, PARTICIPANT, PART,		//Keywords
		 SIMULATION, GLOBAL, STEP, ACTION, END,
		 IF, ELSE, WHILE, RETURN, INT, FLOAT, ATTRIBUTES,
		 DEF, REQUIRED;
		 
terminal NUM_STEPS, NUM_PARTS, NUM_ACTIONS,			//System Variables
		 RANDI, RANDF, ME;  				

terminal STRING, NUMBER, DECIMAL, ID;				//Constants

terminal LBRC, RBRC, SEMI, LPREN, RPREN, COMMA,		//Punctuation	
		 TIMESEQ, DIVIDEEQ, MINUSEQ, PLUSEQ, MODEQ, 
		 EQ, DOLLAR, LSBRK, RSBRK, DOT, LTEQ, GTEQ, 
		 PLUS, MINUS, TIMES, DIVIDE, MOD, EQEQ, NOTEQ, 
		 AND, OR, LT, GT, NOT;

//solves the if-else ambiguity
precedence left ELSE;

//////////////////////
//GRAMMAR
//////////////////////
start with S;

//Simulation Level
S ::= SimulationFile:s EnvironmentFile:ef ParticipantFiles:pf
																{: ASTNode n = new ASTNode(s); 
																   n.pushOp(ef);
																   n.pushOp(pf);
																   RESULT = n;
																:}; 

EnvironmentFile ::= ENVIRONMENT Meta:m Interface:i Step:s Actions:a 
																{: ASTNode n = new ASTNode(sym.ENVIRONMENT); 
																   n.pushOp(m);
																   n.pushOp(i);
																   n.pushOp(s);
																   n.pushOp(a);
																   RESULT = n;
																:}; 

ParticipantFile ::= PARTICIPANT Meta:m Step:s
																{: ASTNode n = new ASTNode(sym.PARTICIPANT); 
																   n.pushOp(m);
																   n.pushOp(s);
																   RESULT = n;
																:}; 
																
ParticipantFiles ::= ParticipantFile:p ParticipantFiles:pf  
																{: ASTNode n = new ASTNode(null); 
																   n.pushOp(p);
																   n.pushOp(pf);
																   RESULT = n;
																:} 
					| /*empty*/;
					
					
					
SimulationFile ::= SIMULATION Meta:m EnvironmentConfig:ec ParticipantConfigList:ecl End 
					
																{: ASTNode n = new ASTNode(sym.SIMULATION); 
																		   n.pushOp(m);
																		   n.pushOp(ec);
																		   n.pushOp(ecl);
																		   RESULT = n;
																System.out.println("Parsed simulation file: " + m); 
																:};


//===========================================================================
//File Level
Meta ::= NAME STRING:s SEMI {: RESULT = s; :};
Interface ::= Environmental_vars:e Participant_vars:p
																{: ASTNode n = new ASTNode(null); 
																   n.pushOp(e);
																   n.pushOp(p);
																   RESULT = n;
																:}; 
Environmental_vars ::= GLOBAL LBRC AttributeDeclarationList:l RBRC 
																{: ASTNode n = new ASTNode(sym.GLOBAL); 
																   n.pushOp(l);
																   RESULT = n;
																:}
						| /* empty */;
Participant_vars ::= ATTRIBUTES LBRC AttributeDeclarationList:l RBRC 
																{: ASTNode n = new ASTNode(sym.ATTRIBUTES); 
																   n.pushOp(l);
																   RESULT = n;
																:}
						| /* empty */; 


//Environment and Participant File Specific
//colin
Step ::= DEF REQUIRED STEP LPREN RPREN Block:b {: RESULT = b; :};
Actions ::= Action:a Actions:al 
																{: ASTNode n = new ASTNode(null); 
																   n.pushOp(a);
																   n.pushOp(al);
																   RESULT = n;
																:}
						| /*empty*/; 
//colin not sure if operator is necessary, maybe RESULT = Block
Action ::= DEF ACTION ID LPREN ArgList:al RPREN Block:b
																{: ASTNode n = new ASTNode(sym.ID); 
																   n.pushOp(al);
																   n.pushOp(b);
																   RESULT = n;
																:} 
		 | DEF ACTION ID LPREN RPREN Block:b
																{: ASTNode n = new ASTNode(sym.ID); 
																   n.pushOp(b);
																   RESULT = n;
																:}; 

ArgList ::= Arg:a COMMA ArgList:l 
																{: ASTNode n = new ASTNode(null); 
																   n.pushOp(a);
																   n.pushOp(l);
																   RESULT = n;
																:} 
		| Arg:a
																{: RESULT = a;
																:}; 
Arg ::= DataType:d ID
																{: ASTNode n = new ASTNode(sym.ID); 
																   n.pushOp(d);
																   RESULT = n;
																:}; 
//Simulation File Specific
EnvironmentConfig ::= ENVIRONMENT STRING:s LBRC AssignmentList:l RBRC {: Yylex.files.addFirst((String)s); 
																		ASTNode n = new ASTNode(s);
																		n.pushOp(l);
																		RESULT = n;
																	:};

ParticipantConfigList ::= ParticipantConfigs:p {: RESULT = p; :}
					| /* empty */;

ParticipantConfigs ::= ParticipantConfig:c ParticipantConfigs:cs 
																{: ASTNode n = new ASTNode(null);
																   n.pushOp(c);
																   n.pushOp(cs);
																   RESULT = n;
																:}
                    | ParticipantConfig:c {: RESULT = c; :};

ParticipantConfig ::= PARTICIPANT STRING:s ID LBRC AssignmentList:l RBRC {: Yylex.files.addLast((String)s); 
																			ASTNode n = new ASTNode(sym.PARTICIPANT);
																			n.pushOp(sym.ID);
																			n.pushOp(l);
																			RESULT = n;
																		:}
                   | PARTICIPANT STRING:s ID {: Yylex.files.addLast((String)s); 
                   								ASTNode n = new ASTNode(sym.PARTICIPANT);
                   								n.pushOp(sym.ID);
                   								RESULT = n;
                   							:} SEMI; //I think the action just gets moved to the end anyway

AssignmentList ::= Assignment:a SEMI AssignmentList:l 
																{: ASTNode n = new ASTNode(null);
																	n.pushOp(a);
																	n.pushOp(l);
																	RESULT = n;
																:}
					| /*empty*/;

End ::= DEF REQUIRED END LPREN RPREN Block:b
																{: ASTNode n = new ASTNode(sym.END);
																   n.pushOp(b);
																   RESULT = n;
																:};

//===========================================================================
//Block Level

Block ::= LBRC Lines:l RBRC
																{: RESULT = l;
																:};

Lines ::= Statement:s Lines:l
																{: ASTNode n = new ASTNode(null);
																	n.pushOp(s);
																	n.pushOp(l);
																	RESULT = n;
																:}
       | /*empty*/;

Statement ::= Block:b
																{: RESULT = b;
																:}
           | IfStatement:i 
																{: RESULT = i;
																:}
           | ElseStatement:e
																{: RESULT = e;
																:}
           | WHILE LPREN BooleanExpression:b RPREN Statement:s
																{: ASTNode n = new ASTNode(sym.WHILE);
																	n.pushOp(b);
																	n.pushOp(s);
																	RESULT = n;
																:}
           | RETURN BooleanExpression:ne SEMI
																{: ASTNode n = new ASTNode(sym.RETURN);
																	n.pushOp(ne);
																	RESULT = n;
																:}
           | BooleanExpression:ne SEMI
																{: RESULT = ne;
																:}
           | Declaration:d SEMI
																{: RESULT = d;
																:};
           
IfStatement ::= IF LPREN BooleanExpression:b RPREN Statement:s
																{: ASTNode n = new ASTNode(sym.IF);
																	n.pushOp(b);
																	n.pushOp(s);
																	RESULT = n;
																:};

ElseStatement ::= IF LPREN BooleanExpression:b RPREN Statement:s1 ELSE Statement:s2
																{: ASTNode n = new ASTNode(sym.IF);
																	n.pushOp(b);
																	n.pushOp(s1);
																	n.pushOp(s2);
																	RESULT = n;
																:};

//DECLARATIONS
AttributeDeclarationList ::= AttributeDeclaration:ad SEMI AttributeDeclarationList:adl 
																{: ASTNode n = new ASTNode(null);
																	n.pushOp(ad);
																	n.pushOp(adl);
																	RESULT = n;
																:}
			| /*empty*/;

AttributeDeclaration ::= Declaration:d Constraint:c 
																{: ASTNode n = new ASTNode(null);
																	n.pushOp(d);
																	n.pushOp(c);
																	RESULT = n;
																:}
			| Declaration:d
																{: RESULT = d;
																:};

Constraint ::= LBRC ArithmeticExpression:ae RBRC
																{: RESULT = ae;
																:};

Declaration ::= DataType:d IdList:i
																{: ASTNode n = new ASTNode(null);
																	n.pushOp(d);
																	n.pushOp(i);
																	RESULT = n;
																:};

IdList ::= ID COMMA IdList:i 
																{: ASTNode n = new ASTNode(null);
																	n.pushOp(sym.ID);
																	n.pushOp(i);
																	RESULT = n;
																:}

			| ID
																{: RESULT = sym.ID;
																:};

DataType ::= INT 
																{: RESULT = sym.INT;
																:}
			| FLOAT
																{: RESULT = sym.FLOAT;
																:};

//ASSIGNMENT
Assignment ::= ID TIMESEQ NumericalExpression:ne
																{: ASTNode n = new ASTNode(sym.TIMESEQ);
																	n.pushOp(sym.ID);
																	n.pushOp(ne);
																	RESULT = n;
																:}
            | ID DIVIDEEQ NumericalExpression:ne
																{: ASTNode n = new ASTNode(sym.DIVIDEEQ);
																	n.pushOp(sym.ID);
																	n.pushOp(ne);
																	RESULT = n;
																:}
            | ID MINUSEQ NumericalExpression:ne
																{: ASTNode n = new ASTNode(sym.MINUSEQ);
																	n.pushOp(sym.ID);
																	n.pushOp(ne);
																	RESULT = n;
																:}
            | ID PLUSEQ NumericalExpression:ne
																{: ASTNode n = new ASTNode(sym.PLUSEQ);
																	n.pushOp(sym.ID);
																	n.pushOp(ne);
																	RESULT = n;
																:}
            | ID MODEQ NumericalExpression:ne
																{: ASTNode n = new ASTNode(sym.MODEQ);
																	n.pushOp(sym.ID);
																	n.pushOp(ne);
																	RESULT = n;
																:}
            | ID EQ NumericalExpression:ne
																{: ASTNode n = new ASTNode(sym.EQ);
																	n.pushOp(sym.ID);
																	n.pushOp(ne);
																	RESULT = n;
																:};

//FUNCTION CALLS
FunctionCall ::= ID LPREN NumericalExpressionList:l RPREN  
																{: ASTNode n = new ASTNode(sym.ID);
																	n.pushOp(l);
																	RESULT = n;
																:}
				| ID LPREN RPREN  
																{: RESULT = sym.ID;
																:}
				| DOLLAR SystemPartRef:spr DOT STEP LPREN NumericalExpressionList:nel RPREN
																{: ASTNode n = new ASTNode(spr);
																	n.pushOp(nel);
																	n.pushOp(sym.DOLLAR);
																	n.pushOp(sym.DOT);
																	n.pushOp(sym.STEP);
																	RESULT = n;
																:}
				| DOLLAR SystemPartRef:s DOT STEP LPREN RPREN  
																{: ASTNode n = new ASTNode(s);
																	n.pushOp(sym.DOLLAR);
																	n.pushOp(sym.DOT);
																	n.pushOp(sym.STEP);
																	RESULT = n;
																:}
				| DOLLAR ACTION LSBRK Index:i RSBRK LPREN NumericalExpressionList:l RPREN 
																{: ASTNode n = new ASTNode(sym.ACTION);
																	n.pushOp(i);
																	n.pushOp(l);
																	n.pushOp(sym.DOLLAR);
																	RESULT = n;
																:}
				| DOLLAR ACTION LSBRK Index:i RSBRK LPREN RPREN
																{: ASTNode n = new ASTNode(sym.ACTION);
																	n.pushOp(i);
																	n.pushOp(sym.DOLLAR);
																	RESULT = n;
																:};

NumericalExpressionList ::= NumericalExpression:ne COMMA NumericalExpressionList:nel
																{: ASTNode n = new ASTNode(null);
																    n.pushOp(ne);
																	n.pushOp(nel);
																	RESULT = n;
																:}
				| NumericalExpression:ne
																{: RESULT = ne;
																:};

//EXPRESSIONS	
BooleanExpression ::= OrExpression:o
																{: RESULT = o;
																:};
OrExpression ::= OrExpression:o OR AndExpression:a
																{: ASTNode n = new ASTNode(sym.OR);
																    n.pushOp(o);
																	n.pushOp(a);
																	RESULT = n;
																:}
    | AndExpression:a
																{: RESULT = a;
																:};
AndExpression ::= AndExpression:a AND EqualityExpression:e
																{: ASTNode n = new ASTNode(sym.AND);
																	n.pushOp(a);
																	n.pushOp(e);
																	RESULT = n;
																:}
      			| EqualityExpression:e
																{: RESULT = e;
																:};

EqualityExpression ::= EqualityExpression:e EQEQ RelationalExpression:r
																{: ASTNode n = new ASTNode(sym.EQEQ);
																	n.pushOp(e);
																	n.pushOp(r);
																	RESULT = n;
																:}
                   | EqualityExpression:e NOTEQ RelationalExpression:r
																{: ASTNode n = new ASTNode(sym.NOTEQ);
																	n.pushOp(e);
																	n.pushOp(r);
																	RESULT = n;
																:}
                   | RelationalExpression:r
																{: RESULT = r;
																:};

RelationalExpression ::= AdditiveExpression:al LT AdditiveExpression:ar
																{: ASTNode n = new ASTNode(sym.LT);
																	n.pushOp(al);
																	n.pushOp(ar);
																	RESULT = n;
																:}
                      | AdditiveExpression:al GT AdditiveExpression:ar
																{: ASTNode n = new ASTNode(sym.GT);
																	n.pushOp(al);
																	n.pushOp(ar);
																	RESULT = n;
																:}
                      | AdditiveExpression:al LTEQ AdditiveExpression:ar
																{: ASTNode n = new ASTNode(sym.LTEQ);
																	n.pushOp(al);
																	n.pushOp(ar);
																	RESULT = n;
																:}
                      | AdditiveExpression:al GTEQ AdditiveExpression:ar
																{: ASTNode n = new ASTNode(sym.GTEQ);
																	n.pushOp(al);
																	n.pushOp(ar);
																	RESULT = n;
																:}
                      | NumericalExpression:ne
																{: RESULT = ne;
																:};

NumericalExpression ::= Assignment:a
																{: RESULT = a;
																:}
            | ArithmeticExpression:a
																{: RESULT = a;
																:};

ArithmeticExpression ::= AdditiveExpression:a
																{: RESULT = a;
																:};

AdditiveExpression ::= AdditiveExpression:a PLUS MultiplicativeExpression:m
																{: ASTNode n = new ASTNode(sym.PLUS);
																	n.pushOp(a);
																	n.pushOp(m);
																	RESULT = n;
																:}
                   | AdditiveExpression:a MINUS MultiplicativeExpression:m
																{: ASTNode n = new ASTNode(sym.MINUS);
																	n.pushOp(a);
																	n.pushOp(m);
																	RESULT = n;
																:}
                   | MultiplicativeExpression:m
																{: RESULT = m;
																:};

MultiplicativeExpression ::= MultiplicativeExpression:m TIMES UnaryExpression:u
																{: ASTNode n = new ASTNode(sym.TIMES);
																	n.pushOp(m);
																	n.pushOp(u);
																	RESULT = n;
																:}
                         |  MultiplicativeExpression:m DIVIDE UnaryExpression:u
																{: ASTNode n = new ASTNode(sym.DIVIDE);
																	n.pushOp(m);
																	n.pushOp(u);
																	RESULT = n;
																:}
                         |  MultiplicativeExpression:m MOD UnaryExpression:u
																{: ASTNode n = new ASTNode(sym.MOD);
																	n.pushOp(m);
																	n.pushOp(u);
																	RESULT = n;
																:}
                         | UnaryExpression:u
																{: RESULT = u;
																:};

UnaryExpression ::= NOT UnaryExpression:u
																{: ASTNode n = new ASTNode(sym.NOT);
																	n.pushOp(u);
																	RESULT = n;
																:}

                | LPREN NumericalExpression:ne RPREN 
																{: RESULT = ne;
																:}
                | Data:d
																{: RESULT = d;
																:};

//VARIABLES AND DATA
Data ::= ID 
																{: RESULT = sym.ID;
																:}
			| SystemVar:s 
																{: RESULT = s;
																:}
			| NUMBER 
																{: RESULT = sym.NUMBER;
																:}
			| DECIMAL 
																{: RESULT = sym.DECIMAL;
																:}
			| FunctionCall:f
																{: RESULT = f;
																:};

SystemVar ::= DOLLAR SystemVarName:s 
																{: RESULT = s;
																:}
			| DOLLAR SystemPartRef:s DOT ID 
																{: ASTNode n = new ASTNode(sym.DOT);
																	n.pushOp(sym.ID);
																	n.pushOp(s);
																	RESULT = n;
																:}
			| DOLLAR GLOBAL DOT ID
																{: ASTNode n = new ASTNode(sym.DOT);
																	n.pushOp(sym.DOLLAR);
																	n.pushOp(sym.GLOBAL);
																	n.pushOp(sym.ID);
																	RESULT = n;
																:};

SystemVarName ::= NUM_STEPS
																{: RESULT = sym.NUM_STEPS;
																:}
        |    NUM_PARTS
																{: RESULT = sym.NUM_PARTS;
																:}
        |    NUM_ACTIONS
																{: RESULT = sym.NUM_ACTIONS;
																:}
        |    RANDI
																{: RESULT = sym.RANDI;
																:}
        |    RANDF
																{: RESULT = sym.RANDF;
																:};

SystemPartRef ::= PART LSBRK Index:i RSBRK 
																{: ASTNode n = new ASTNode(sym.PART);
																	n.pushOp(i);
																	RESULT = n;
																:}
		| ME
																{: RESULT = sym.ME;
																:};

Index ::= ID 
																{: RESULT = sym.ID;
																:}
		| NUMBER
																{: RESULT = sym.NUMBER;
																:};	