package syntax;

import java_cup.runtime.*;


//NON TERMINALS
non terminal S, EnvironmentFile, Meta, Interface, Step, Actions;
non terminal ParticipantFiles, ParticipantFile;
non terminal SimulationFile, EnvironmentConfig, ParticipantConfigList, ParticipantConfigs, ParticipantConfig, End;
non terminal Environmental_vars, Participant_vars, AttributeDeclarations;
non terminal Block, Action, ArgList, Arg, DataType;
non terminal AssignmentList, Assignment;
non terminal Lines, Statement, Expression, IfStatement, Declaration, Constraint, ArithmeticExpression;
non terminal IdList;
non terminal FunctionCall, ExpressionList, SystemPartRef, SystemVar, SystemVarName, Index;
non terminal OrExpression, AndExpression, RelationalExpression, EqualityExpression, AdditiveExpression;
non terminal MultiplicativeExpression, UnaryExpression, Data;


//TERMINALS

terminal NAME, ENVIRONMENT, PARTICIPANT, PART,		//Keywords
		 SIMULATION, GLOBAL, STEP, ACTION, END,
		 IF, ELSE, WHILE, RETURN, INT, FLOAT, ATTRIBUTES,
		 DEF, REQUIRED;
		 
terminal NUM_STEPS, NUM_PARTS, NUM_ACTIONS,			//System Variables
		 RANDI, RANDF, ME;  				

terminal STRING, NUMBER, DECIMAL, ID;				//Constants

terminal LBRC, RBRC, SEMI, LPREN, RPREN, COMMA,		//Punctuation	
		 TIMESEQ, DIVIDEEQ, MINUSEQ, PLUSEQ, MODEQ, 
		 EQ, DOLLAR, LSBRK, RSBRK, DOT, LTEQ, GTEQ, 
		 PLUS, MINUS, TIMES, DIVIDE, MOD, EQEQ, NOTEQ, 
		 AND, OR, LT, GT, NOT;

//////////////////////
//GRAMMAR
//////////////////////

//Simulation Level
S ::= SimulationFile EnvironmentFile ParticipantFiles; 
EnvironmentFile ::= ENVIRONMENT Meta Interface Step Actions;
ParticipantFile ::= PARTICIPANT Meta Step;
ParticipantFiles ::= ParticipantFile ParticipantFiles | ParticipantFile;
SimulationFile ::= SIMULATION Meta:m EnvironmentConfig ParticipantConfigList End {: System.out.println("Parsed simulation file: " + m); :};

//===========================================================================
//File Level
Meta ::= NAME STRING:s SEMI {: RESULT = s; :};
Interface ::= Environmental_vars Participant_vars;
Environmental_vars ::= GLOBAL LBRC AttributeDeclarations RBRC | /* empty */;
Participant_vars ::= ATTRIBUTES LBRC AttributeDeclarations RBRC | /* empty */;


//Environment and Participant File Specific
Step ::= DEF REQUIRED STEP Block;
Actions ::= Action Actions | Action;
Action ::= ACTION ID LPREN ArgList RPREN Block;
ArgList ::= Arg COMMA ArgList | Arg;
Arg ::= DataType ID;

//Simulation File Specific
EnvironmentConfig ::= ENVIRONMENT STRING LBRC AssignmentList RBRC;

ParticipantConfigList ::= ParticipantConfigs | /* empty */;

ParticipantConfigs ::= ParticipantConfig ParticipantConfigs
                    | ParticipantConfig;

ParticipantConfig ::= PARTICIPANT STRING ID LBRC AssignmentList RBRC
                   | PARTICIPANT STRING ID;

AssignmentList ::= Assignment SEMI AssignmentList | Assignment SEMI;

End ::= DEF REQUIRED END LPREN RPREN Block;

//===========================================================================
//Block Level

Block ::= LBRC Lines RBRC;

Lines ::= Statement Lines
       | Statement;

Statement ::= Block
           | IfStatement ELSE Statement
           | IfStatement Statement
           | WHILE LPREN Expression RPREN Statement
           | RETURN Expression SEMI
           | Expression SEMI
           | Declaration SEMI;
           
IfStatement ::= IF LPREN Expression RPREN Statement;

//DECLARATIONS
AttributeDeclarations ::= Declaration Constraint SEMI | Declaration SEMI;

Constraint ::= LBRC ArithmeticExpression RBRC;

Declaration ::= DataType IdList SEMI;

IdList ::= ID COMMA IdList | ID;

DataType ::= INT | FLOAT; 

//ASSIGNMENT
Assignment ::= ID TIMESEQ Expression
            | ID DIVIDEEQ Expression
            | ID MINUSEQ Expression
            | ID PLUSEQ Expression
            | ID MODEQ Expression
            | ID EQ Expression;

//FUNCTION CALLS
FunctionCall ::= ID LPREN ExpressionList RPREN  
				| ID LPREN  RPREN  
				| DOLLAR SystemPartRef DOT STEP LPREN ExpressionList RPREN  
				| DOLLAR ACTION LSBRK Index RSBRK LPREN ExpressionList RPREN; 


//EXPRESSIONS
Expression ::= Assignment
            | FunctionCall
            | ArithmeticExpression;

ExpressionList ::= Expression COMMA ExpressionList | Expression;

ArithmeticExpression ::= OrExpression;

OrExpression ::= OrExpression OR AndExpression
    | AndExpression;

AndExpression ::= AndExpression AND EqualityExpression 
      | EqualityExpression;

EqualityExpression ::= EqualityExpression EQEQ RelationalExpression
                   | EqualityExpression NOTEQ RelationalExpression
                   | RelationalExpression;

RelationalExpression ::= RelationalExpression LT AdditiveExpression
                      | RelationalExpression GT AdditiveExpression
                      | RelationalExpression LTEQ AdditiveExpression
                      | RelationalExpression GTEQ AdditiveExpression
                      | AdditiveExpression;

AdditiveExpression ::= AdditiveExpression PLUS MultiplicativeExpression
                   | AdditiveExpression MINUS MultiplicativeExpression
                   | MultiplicativeExpression;

MultiplicativeExpression ::= MultiplicativeExpression TIMES UnaryExpression
                         |  MultiplicativeExpression DIVIDE UnaryExpression
                         |  MultiplicativeExpression MOD UnaryExpression
                         | UnaryExpression;

UnaryExpression ::= NOT UnaryExpression
                | LPREN ArithmeticExpression RPREN 
                | Data;

//VARIABLES
Data ::= ID | SystemVar | NUMBER | DECIMAL;

SystemVar ::= DOLLAR SystemVarName | DOLLAR SystemPartRef DOT ID | DOLLAR GLOBAL DOT ID;

SystemVarName ::= NUM_STEPS
        |    NUM_PARTS
        |    NUM_ACTIONS
        |    RANDI
        |    RANDF;

SystemPartRef ::= PART LSBRK Index RSBRK | ME;

Index ::= ID | NUMBER;