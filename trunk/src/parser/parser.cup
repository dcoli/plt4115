package compiler.syntax;

import compiler.settings.*;
import java_cup.runtime.*;


parser code {:
	public parser(Yylex scanner, String rusFile){
		this(scanner);
		scanner.nextFile = rusFile;
	}
:}


//NON TERMINALS
non terminal S, EnvironmentFile, Meta, Interface, Step, Actions;
non terminal ParticipantFiles, ParticipantFile;
non terminal SimulationFile, EnvironmentConfig, ParticipantConfigList, ParticipantConfig, End;
non terminal Environmental_vars, Participant_vars, AttributeDeclaration, AttributeDeclarationList;
non terminal Block, Action, ArgList, Arg, DataType;
non terminal AssignmentList, Assignment, LValueData;
non terminal Lines, Statement;
non terminal IfStatement, ElseStatement, Declaration, Constraint;
non terminal IdList;
non terminal FunctionCall, Expression, ExpressionList, SystemPartRef, SystemVar, SystemVarName;
non terminal OrExpression, AndExpression, RelationalExpression, EqualityExpression, AdditiveExpression;
non terminal MultiplicativeExpression, UnaryExpression, Data;


//TERMINALS

terminal NAME, ENVIRONMENT, PARTICIPANT, PART,		//Keywords
		 SIMULATION, GLOBAL, STEP, ACTION, END,
		 IF, ELSE, WHILE, RETURN, INT, FLOAT, ATTRIBUTES,
		 DEF, REQUIRED, BOOLEAN, TRUE, FALSE;
		 
terminal NUM_STEPS, NUM_PARTS, NUM_ACTIONS,			//System Variables
		 RANDI, RANDF, ME;  				

terminal STRING, NUMBER, DECIMAL, ID;				//Constants

terminal LBRC, RBRC, SEMI, LPREN, RPREN, COMMA,		//Punctuation	
		 TIMESEQ, DIVIDEEQ, MINUSEQ, PLUSEQ, MODEQ, 
		 EQ, DOLLAR, LSBRK, RSBRK, DOT, LTEQ, GTEQ, 
		 PLUS, MINUS, TIMES, DIVIDE, MOD, EQEQ, NOTEQ, 
		 AND, OR, LT, GT, NOT;

//solves the if-else ambiguity
precedence left ELSE;


//////////////////////
//GRAMMAR
//////////////////////
start with S;

//Simulation Level
S ::= SimulationFile:s EnvironmentFile:ef ParticipantFiles:pf
																{: ASTNode n = new ASTNode(s); 
																   n.pushOp(ef);
																   n.pushOp(pf);
																   RESULT = n;
																:}; 

EnvironmentFile ::= ENVIRONMENT Meta:m Interface:i Step:s Actions:a 
																{: ASTNode n = new ASTNode(sym.ENVIRONMENT); 
																   n.pushOp(m);
																   n.pushOp(i);
																   n.pushOp(s);
																   n.pushOp(a);
																   RESULT = n;
																:}
					| error ENVIRONMENT {: Yylex.displayError("Missing required component or malformed environment file."); :}; 

ParticipantFile ::= PARTICIPANT Meta:m Step:s
																{: ASTNode n = new ASTNode(Yylex.baseFile); 
																   n.pushOp(m);
																   n.pushOp(s);
																   RESULT = n;
																:}; 
																
ParticipantFiles ::= ParticipantFile:p ParticipantFiles:pf
																{: ASTNode n = new ASTNode(null); 
																   n.pushOp(p);
																   n.pushOp(pf);
																   RESULT = n;
																:} 
					| /*empty*/;
					
					
					
SimulationFile ::= SIMULATION Meta:m EnvironmentConfig:ec ParticipantConfigList:pcl End:e 	
																{: ASTNode n = new ASTNode(sym.SIMULATION); 
																		   n.pushOp(m);
																		   n.pushOp(ec);
																		   n.pushOp(pcl);
																		   n.pushOp(e);
																		   RESULT = n;
																System.out.println("Parsed simulation file: " + m); 
																:}
					| error RBRC{: Yylex.displayError("Missing required component."); :};


//===========================================================================
//File Level
Meta ::= NAME STRING:s SEMI 									{: RESULT = s; :}
			| error SEMI 										{: Yylex.displayError("Malformed meta statement."); :};
			
Interface ::= Environmental_vars:e Participant_vars:p
																{: ASTNode n = new ASTNode(null); 
																   n.pushOp(e);
																   n.pushOp(p);
																   RESULT = n;
																:}; 
Environmental_vars ::= GLOBAL LBRC AttributeDeclarationList:l RBRC 
																{: ASTNode n = new ASTNode(sym.GLOBAL); 
																   n.pushOp(l);
																   RESULT = n;
																:}
						| /* empty */;
Participant_vars ::= ATTRIBUTES LBRC AttributeDeclarationList:l RBRC 
																{: ASTNode n = new ASTNode(sym.ATTRIBUTES); 
																   n.pushOp(l);
																   RESULT = n;
																:}
						| /* empty */; 


//Environment and Participant File Specific
Step ::= DEF REQUIRED STEP LPREN RPREN Block:b 					{: RESULT = b; :};

Actions ::= Action:a Actions:al 
																{: ASTNode n = new ASTNode(null); 
																   n.pushOp(a);
																   n.pushOp(al);
																   RESULT = n;
																:}
			| /*empty*/; 

Action ::= DEF ACTION ID LPREN ArgList:al RPREN Block:b
																{: ASTNode n = new ASTNode(sym.ACTION);
																   n.pushOp(sym.ID); 
																   n.pushOp(al);
																   n.pushOp(b);
																   RESULT = n;
																:} 
		 | DEF ACTION ID LPREN RPREN Block:b
																{: ASTNode n = new ASTNode(sym.ID); 
																   n.pushOp(b);
																   RESULT = n;
																:}
		 | error Block {: Yylex.displayError("Malformed action."); :}; 

ArgList ::= Arg:a COMMA ArgList:l 
																{: ASTNode n = new ASTNode(null); 
																   n.pushOp(a);
																   n.pushOp(l);
																   RESULT = n;
																:} 
		| Arg:a
																{: 
																	ASTNode n = new ASTNode(null);
																	n.pushOp(a);
																	RESULT = n;
																:};
		 
Arg ::= DataType:d ID
																{: ASTNode n = new ASTNode(d);//sym.int,sym.float,etc.
																   n.pushOp(sym.ID); 
																   n.pushOp(d);
																   RESULT = n;
																:}
		| error ID {: Yylex.displayError("Missing data type or identifier in prototype."); :};
		 
//Simulation File Specific
EnvironmentConfig ::= ENVIRONMENT STRING:s LBRC AssignmentList:l RBRC 
																{: Yylex.files.addFirst((String)s); 
																		ASTNode n = new ASTNode(s);
																		n.pushOp(l);
																		RESULT = n;
																:};

ParticipantConfigList ::= ParticipantConfig:c ParticipantConfigList:cs 
																{: ASTNode n = new ASTNode(null);
																   n.pushOp(c);
																   n.pushOp(cs);
																   RESULT = n;
																:}
                    | /*empty*/;

ParticipantConfig ::= PARTICIPANT STRING:s ID:i LBRC AssignmentList:l RBRC {: Yylex.determineNeedToParse((String)s); 
																			ASTNode n = new ASTNode(sym.PARTICIPANT);
																			n.pushOp(s);
																			n.pushOp(i);
																			n.pushOp(l);
																			RESULT = n;
																		:}
                   | PARTICIPANT STRING:s ID:i SEMI						{: Yylex.determineNeedToParse((String)s); 
							                   								ASTNode n = new ASTNode(sym.PARTICIPANT);
							                   								n.pushOp(s);
							                   								n.pushOp(i);
							                   								RESULT = n;
							                   							:};  

AssignmentList ::= Assignment:a SEMI AssignmentList:l 
																{: ASTNode n = new ASTNode(null);
																	n.pushOp(a);
																	n.pushOp(l);
																	RESULT = n;
																:}
					| /*empty*/;

End ::= DEF REQUIRED END LPREN RPREN Block:b					{: RESULT = b;:}
		| error Block {: Yylex.displayError("Malformed end function."); :};

//===========================================================================
//Block Level

Block ::= LBRC Lines:l RBRC
																{: ASTNode n = new ASTNode(astsym.BLOCK);
																	n.pushOp(l);
																	RESULT = n;
																:};

Lines ::= Statement:s Lines:l
																{: ASTNode n = new ASTNode(null);
																	n.pushOp(s);
																	n.pushOp(l);
																	RESULT = n;
																:}
       | /*empty*/;

Statement ::= Block:b
																{: RESULT = b;
																:}
           | IfStatement:i 
																{: RESULT = i;
																:}
           | ElseStatement:e
																{: RESULT = e;
																:}
           | WHILE LPREN Expression:e RPREN Statement:s
																{: ASTNode n = new ASTNode(sym.WHILE);
																	n.pushOp(e);
																	n.pushOp(s);
																	RESULT = n;
																:}
           | RETURN Expression:e SEMI
																{: ASTNode n = new ASTNode(sym.RETURN);
																	n.pushOp(e);
																	RESULT = n;
																:}
           | Declaration:d SEMI									{: RESULT = d;:}
		   | FunctionCall:f SEMI								{: RESULT = f;:}
		   | Assignment:a										{: RESULT = a;:}
		   | error ENVIRONMENT {: Yylex.displayError("Malformed statement"); :};
																
IfStatement ::= IF LPREN Expression:e RPREN Statement:s
																{: ASTNode n = new ASTNode(sym.IF);
																	n.pushOp(e);
																	n.pushOp(s);
																	RESULT = n;
																:};

ElseStatement ::= IF LPREN Expression:e RPREN Statement:s1 ELSE Statement:s2
																{: ASTNode n = new ASTNode(sym.ELSE);
																	n.pushOp(e);
																	n.pushOp(s1);
																	n.pushOp(s2);
																	RESULT = n;
																:};

//DECLARATIONS
AttributeDeclarationList ::= AttributeDeclaration:ad SEMI AttributeDeclarationList:adl 
																{: ASTNode n = new ASTNode(null);
																	n.pushOp(ad);
																	n.pushOp(adl);
																	RESULT = n;
																:}
			| /*empty*/;

AttributeDeclaration ::= Declaration:d Constraint:c 
																{: ASTNode n = new ASTNode(null);
																	n.pushOp(d);
																	n.pushOp(c);
																	RESULT = n;
																:}
			| Declaration:d
																{: ASTNode n = new ASTNode(null);
																	n.pushOp(d);
																	RESULT = n;
																:};

Constraint ::= LBRC Expression:e RBRC
																{:  
																	RESULT = e;
																:}
			  | error RBRC {: Yylex.displayError("Malformed constraint.  Make sure statements return boolean value."); :};

Declaration ::= DataType:d IdList:i
																{: ASTNode n = new ASTNode(astsym.DECLARATION);
																	n.pushOp(d);
																	n.pushOp(i);
																	RESULT = n;
																:};

//finish this
IdList ::= ID:i COMMA IdList:l 
																{: ASTNode n = new ASTNode(astsym.IDLIST);
																	n.pushOp(i);
																	n.pushOp(l);
																	RESULT = n;
																:}

			| ID:i												{: ASTNode n = new ASTNode(sym.ID);
																	n.pushOp(i);
																	RESULT = n;:};

DataType ::= INT 												{: RESULT = sym.INT;:}
			| FLOAT												{: RESULT = sym.FLOAT;:}																
			| BOOLEAN											{: RESULT = sym.BOOLEAN;:}
			| PARTICIPANT										{: RESULT = sym.PARTICIPANT;:};
																

//ASSIGNMENT
Assignment ::= LValueData:i TIMESEQ Expression:e
																{: ASTNode n = new ASTNode(sym.TIMESEQ);
																	n.pushOp(i);
																	n.pushOp(e);
																	RESULT = n;
																:}
            | LValueData:i DIVIDEEQ Expression:e
																{: ASTNode n = new ASTNode(sym.DIVIDEEQ);
																	n.pushOp(i);
																	n.pushOp(e);
																	RESULT = n;
																:}
            | LValueData:i MINUSEQ Expression:e
																{: ASTNode n = new ASTNode(sym.MINUSEQ);
																	n.pushOp(i);
																	n.pushOp(e);
																	RESULT = n;
																:}
            | LValueData:i PLUSEQ Expression:e
																{: ASTNode n = new ASTNode(sym.PLUSEQ);
																	n.pushOp(i);
																	n.pushOp(e);
																	RESULT = n;
																:}
            | LValueData:i MODEQ Expression:e
																{: ASTNode n = new ASTNode(sym.MODEQ);
																	n.pushOp(i);
																	n.pushOp(e);
																	RESULT = n;
																:}
            | LValueData:i EQ Expression:e
            													{: ASTNode n = new ASTNode(sym.EQ);
																	n.pushOp(i);
																	n.pushOp(e);
																	RESULT = n;
																:}
																										
	    | error EQ {: Yylex.displayError("Malformed assignment statement."); :};


LValueData ::= ID:i 												{: ASTNode n = new ASTNode(sym.ID);
															n.pushOp(i);
															RESULT = n;
														:}
	    | SystemVar:s											{: ASTNode n = new ASTNode(astsym.SYSTEM_VAR);
															n.pushOp(s);
															RESULT = n;
														:};
	    
	   

//FUNCTION CALLS
FunctionCall ::= ID:i LPREN ExpressionList:l RPREN
																{: ASTNode n = new ASTNode(astsym.FUNCTION_CALL);
																	n.pushOp(sym.ID);
																	n.pushOp(i);
																	n.pushOp(l);
																	RESULT = n;
																:}
				| ID:i LPREN RPREN  
																{: ASTNode n = new ASTNode(astsym.FUNCTION_CALL);
																   n.pushOp(sym.ID);
																   n.pushOp(i);
																   RESULT = n;
																:}
				
				| DOLLAR SystemPartRef:s DOT STEP LPREN RPREN  
																{: ASTNode n = new ASTNode(astsym.FUNCTION_CALL);
																    n.pushOp(astsym.STEP_CALL);
																	n.pushOp(s);
																	RESULT = n;
																:}
				| error RPREN {: Yylex.displayError("Malformed function call."); :};

ExpressionList ::= Expression:e COMMA ExpressionList:el
																{: ASTNode n = new ASTNode(null);
																    n.pushOp(e);
																	n.pushOp(el);
																	RESULT = n;
																:}
		| Expression:e
																{: ASTNode n = new ASTNode(null);
																	n.pushOp(e);
																	RESULT = n;
																:};
//EXPRESSIONS
Expression	::= OrExpression:o									{: RESULT = o;
																:};
				   
				   
OrExpression ::= OrExpression:o OR AndExpression:a
																{: ASTNode n = new ASTNode(sym.OR);
																    n.pushOp(o);
																	n.pushOp(a);
																	RESULT = n;
																:}
    
    | AndExpression:a											{: RESULT = a;
																:};

AndExpression ::= AndExpression:a AND EqualityExpression:e
																{: ASTNode n = new ASTNode(sym.AND);
																	n.pushOp(a);
																	n.pushOp(e);
																	RESULT = n;
																:}
      			| EqualityExpression:e
																{: RESULT = e;
																:};

EqualityExpression ::= EqualityExpression:e EQEQ RelationalExpression:r
																{: ASTNode n = new ASTNode(sym.EQEQ);
																	n.pushOp(e);
																	n.pushOp(r);
																	RESULT = n;
																:}
                   | EqualityExpression:e NOTEQ RelationalExpression:r
																{: ASTNode n = new ASTNode(sym.NOTEQ);
																	n.pushOp(e);
																	n.pushOp(r);
																	RESULT = n;
																:}
                   | RelationalExpression:r						{: RESULT = r;:};

RelationalExpression ::= AdditiveExpression:al LT AdditiveExpression:ae
																{: ASTNode n = new ASTNode(sym.LT);
																	n.pushOp(al);
																	n.pushOp(ae);
																	RESULT = n;
																:}
                      | AdditiveExpression:al GT AdditiveExpression:ae
																{: ASTNode n = new ASTNode(sym.GT);
																	n.pushOp(al);
																	n.pushOp(ae);
																	RESULT = n;
																:}
                      | AdditiveExpression:al LTEQ AdditiveExpression:ae
																{: ASTNode n = new ASTNode(sym.LTEQ);
																	n.pushOp(al);
																	n.pushOp(ae);
																	RESULT = n;
																:}
                      | AdditiveExpression:al GTEQ AdditiveExpression:ae
																{: ASTNode n = new ASTNode(sym.GTEQ);
																	n.pushOp(al);
																	n.pushOp(ae);
																	RESULT = n;
																:}
					  | AdditiveExpression:ae					{: RESULT = ae;:};

AdditiveExpression ::= AdditiveExpression:a PLUS MultiplicativeExpression:m
																{: ASTNode n = new ASTNode(sym.PLUS);
																	n.pushOp(a);
																	n.pushOp(m);
																	RESULT = n;
																:}
                   | AdditiveExpression:a MINUS MultiplicativeExpression:m
																{: ASTNode n = new ASTNode(sym.MINUS);
																	n.pushOp(a);
																	n.pushOp(m);
																	RESULT = n;
																:}
                   | MultiplicativeExpression:m
																{: RESULT = m;
																:};

MultiplicativeExpression ::= MultiplicativeExpression:m TIMES UnaryExpression:u
																{: ASTNode n = new ASTNode(sym.TIMES);
																	n.pushOp(m);
																	n.pushOp(u);
																	RESULT = n;
																:}
                         |  MultiplicativeExpression:m DIVIDE UnaryExpression:u
																{: ASTNode n = new ASTNode(sym.DIVIDE);
																	n.pushOp(m);
																	n.pushOp(u);
																	RESULT = n;
																:}
                         |  MultiplicativeExpression:m MOD UnaryExpression:u
																{: ASTNode n = new ASTNode(sym.MOD);
																	n.pushOp(m);
																	n.pushOp(u);
																	RESULT = n;
																:}
                         
                         | UnaryExpression:u					{: RESULT = u;:};

UnaryExpression ::= NOT UnaryExpression:u
																{: ASTNode n = new ASTNode(sym.NOT);
																	n.pushOp(u);
																	RESULT = n;
																:}

                | LPREN Expression:e RPREN 						{: ASTNode n = new ASTNode(sym.LPREN);
																	n.pushOp(e);
																	RESULT = n;
																:}

                | Data:d										{: RESULT = d;:};

//VARIABLES AND DATA
Data ::= ID:i 													{: ASTNode n = new ASTNode(sym.ID);
															n.pushOp(i);
															RESULT = n;
														:}
			| SystemVar:s										{: ASTNode n = new ASTNode(astsym.SYSTEM_VAR);
															n.pushOp(s);
															RESULT = n;
														:}
			| NUMBER:num 										{: ASTNode n = new ASTNode(sym.NUMBER);
															n.pushOp(num);
															RESULT = n;
														:}
			| DECIMAL:d 										{: ASTNode n = new ASTNode(sym.DECIMAL);
															n.pushOp(d);
															RESULT = n;
														:}
			| FunctionCall:f									{: ASTNode n = new ASTNode(astsym.FUNCTION_CALL);
															n.pushOp(f);
															RESULT = n;
														:}
			| TRUE											{: RESULT = new ASTNode(sym.TRUE); :}
            | FALSE											{: RESULT = new ASTNode(sym.FALSE); :};


SystemVar ::= DOLLAR SystemVarName:s 
														{: ASTNode n = new ASTNode(astsym.SYSTEM_VAR_NAME);
															n.pushOp(s);
															RESULT = n;
														:}
	| DOLLAR SystemPartRef:s DOT ID:i 
														{: ASTNode n = new ASTNode(astsym.SYSTEM_PART_REF);
															n.pushOp(s);
															n.pushOp(i);
															RESULT = n;
														:}

	| DOLLAR GLOBAL DOT ID:i										{: ASTNode n = new ASTNode(astsym.SYSTEM_GLOBAL);
															n.pushOp(i);
															RESULT = n;
														:};

SystemVarName ::= NUM_STEPS
																{: RESULT = sym.NUM_STEPS;
																:}
        |    NUM_PARTS
																{: RESULT = sym.NUM_PARTS;
																:}
        |    NUM_ACTIONS
																{: RESULT = sym.NUM_ACTIONS;
																:}
        |    RANDI
																{: RESULT = sym.RANDI;
																:}
        |    RANDF
																{: RESULT = sym.RANDF;
																:};

SystemPartRef ::= PART LSBRK NUMBER:i RSBRK 
																{: ASTNode n = new ASTNode(sym.PART);
																	n.pushOp(i);
																	RESULT = n;
																:}
		| ME
																{: RESULT = new ASTNode(sym.ME);
																:};